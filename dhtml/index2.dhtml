#!/bin/perl -T
#
# by Ian Watt, 2015-11-15
# iwatt@myseneca.ca
# https://github.com/ewatt/INT620
#

# untaint environment. http://perldoc.perl.org/perlsec.html
delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};


# === debugging options ===

# toggle debugging
my $debug = 1;

# this line helps in locating last script execution output in logs
warn "[!!!]\n\n[+++] Wubba-lubba-dub-dub!\n\n" if $debug; 


# === module declarations ===

use strict;
use warnings;
use Template;
use DBI;
use CGI qw(:standard);
use Apache::Session::MySQL;
use Digest::SHA1 qw(sha1_base64);

if ($debug) {
	use diagnostics;
	use Data::Dumper;
	use Carp qw(croak);
	use Scalar::Util qw(reftype);
}

# set path to local modules
use lib qw(/srv/Project/modules);
use DatabaseConfiguration;


# === constant declarations === 

use constant TEMPLATELIB	=> "/srv/Project/tt2";
use constant TEMPLATE		=> "pageMain.tt2";
use constant HASHSALT		=> "58b4a401-3b7a-4c92-aaaf-8273c74752ed";


# === variable declarations ===

my (
	$cgiObject,
	$dbObject,
	%ttConfig,
	$ttObject,
	$ttParameters,
	$loginUID,
	$jsonData,
	$cookieUID,
	$cookieSession,
	%session,
	$sessionID,
);


# === function declarations

# check login credentials in the database
sub CheckLogin {

	# get username and password parameters
	my $username = $cgiObject->param("loginUsername");
	my $password = $cgiObject->param("loginPassword");
	
	# untaint $username, only allow [azAZ09.-_], max 45 chars
	if ($username =~ /^([\w\-\.])$/a) {
		$username = $1
	}
	
	# untaint $password, allow any non whitespace, max 45 chars
	if ($password =~ /^([\S])$/a) {
		$password = $1
	}
	
	# salt is uuid combined with username to make it
	# unique for users who have the same passwords.	
	my $SaltHashPass = sha1_base64($password,HASHSALT.$username);
	
	if ($debug) {
		warn "[!] sub CheckLogin";
		warn "[+] \$username = $username";
		warn "[+] \$password = $password";
		warn "[+] \$SaltHashPass = $SaltHashPass";
	}
	
	# create database object
	my $dbObject = DatabaseConfiguration::ConnectDatabase;
	
	# create sql query statement
	my $sqlQuery = qq~SELECT id FROM tbl_plebs WHERE pleb=? AND code=?~;
	
	# prepare sql query
	my $sqlObject = $dbObject->prepare($sqlQuery)
		or die $dbObject->errstr;
	
	# execute sql query
	$sqlObject->execute($username,$SaltHashPass)
		or die $sqlObject->errstr;
	
	# retrieve data 
	my ($userID) = $sqlObject->fetchrow_array;
	
	# $userID is undef if login failed.
	return $userID;

} #CheckLogin


sub CheckSignup {
	my $ReturnCode;
	my $username = $cgiObject->param("signupUsername");
	my $password = $cgiObject->param("signupPassword");
	my $confirm  = $cgiObject->param("signupConfirm");
	
	# untaint $username, only allow [azAZ09.-_], max 45 chars
	$username = $1 if ($username =~ /^([\w\-\.]{5,45})$/a);
	
	# untaint $password, allow all printable ASCII, max 45 chars
	$password = $1 if ($password =~ /^([ -~]{8,45})$/a);
	$confirm  = $1 if ($confirm  =~ /^([ -~]{8,45})$/a);
	
	if ($debug) {
		warn "[!] sub CheckSignup";
		warn "[+] \$username = $username";
		warn "[+] \$password = $password";
		warn "[+] \$confirm  = $confirm";
		#warn "[+] \$SaltHashPass = $SaltHashPass";
	}
	
	# create database object
	my $dbObject = DatabaseConfiguration::ConnectDatabase;
	
	# create sql query statement
	my $sqlQuery = qq~SELECT id FROM tbl_plebs WHERE pleb=?~;
	
	# prepare sql query
	my $sqlObject = $dbObject->prepare($sqlQuery)
		or die $dbObject->errstr;
	
	# execute sql query
	$sqlObject->execute($username)
		or die $sqlObject->errstr;
	
	# is username taken?
	my ($userID) = $sqlObject->fetchrow_array;
	
	# username must be available...
	if (not $userID) {

		# password1 and password2 must be the same...
		if ($password eq $confirm) {
			
			#TODO: make this actually work.
			# password must meet complexity requirements...
			#if ($password =~ /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W])$/) {
			#if ($password =~ /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])$/) {
			if ($password =~ /^(.*)$/) {
								
				# all requirement tests passed, new user can sign up.
				$password = $1;
			
				# salt is uuid combined with username to make it
				# unique for users who have the same passwords.	
				my $SaltHashPass = sha1_base64($password,HASHSALT.$username);
		
				# create database object
				# or just reuse the one we already have.
				
				# create sql insert statement
				$sqlQuery = qq~INSERT INTO tbl_plebs (pleb,code) VALUES (?,?)~;
				
				# prepare sql insert
				$sqlObject = $dbObject->prepare($sqlQuery)
					or die $dbObject->errstr;
				
				# execute sql insert
				$sqlObject->execute($username,$SaltHashPass)
					or die $sqlObject->errstr;
				
				# new user sign up complete!
				warn "[+] new user sign up complete!" if ($debug);
				$ReturnCode = 1;
			}
			else {
				# failed complexity requirement
				warn "[-] failed complexity requirement!" if ($debug);
			}
		}
		else {
			# failed matching requirement
			warn "[-] failed matching requirement!" if ($debug);
		}
	}
	else {
		# failed username availability requirement
		warn "[-] failed username availability requirement!" if ($debug);
	}
	
	# return $ReturnCode
	return $ReturnCode;
	
} #CheckSignup




sub ShowLogin {
	
	# create template toolkit object configuration
	%ttConfig = (
		INCLUDE_PATH	=> [ TEMPLATELIB ],
		ENCODING		=> 'utf8',
		PRE_CHOMP		=> 1,
		POST_CHOMP		=> 1,
	);
	
	# create template toolkit object
	$ttObject = Template->new( \%ttConfig );
	
	# create template toolkit parameters list
	$ttParameters = {
		'page'	=> {
			'self'	=> '/index.dhtml',
			'css'	=> '/css/style.css',
			'js'	=> '/js/ajax.css',
			'title'	=> 'title-of-page',
			'copy'	=> '2015',
			'author'=> 'Ian Watt',
		},
		'session' => \%session,
	};
	
	print $cgiObject->header(-type	=> 'text/html',
							 -cookie=> $cookieSession);
	
	$ttObject->process ( TEMPLATE, $ttParameters )
		or die ( $ttObject->error() );

}

sub ShowSite {
	# show main page
	warn "[!] sub ShowSite called!" if $debug;
	
}


sub GetSession {
	my $sessionID = shift;
	
	# create a new session
	tie %session, 'Apache::Session::MySQL', $sessionID,
		{ Handle => $dbObject, LockHandle => $dbObject, };
	
	# store current epoch time in session as first visit.
	# first visit, last visit and count of visits
	$session{first} = $session{last} = time;
	$session{count} = 0;
	$session{access} = 0;
	
	# create session cookie
	$cookieSession =
		$cgiObject->cookie(	-name => 'session',
							-value=> $session{ _session_id },
							-expires=> '+1h',
					);

}

# === begin script execution

# create new CGI object
$cgiObject = new CGI;
$dbObject = DatabaseConfiguration::ConnectDatabase;

# can I have a cookie?
if ($cgiObject->cookie()) {
	
	warn "[!] we got cookies" if ($debug);
	# can I have a session cookie?
	if ($cgiObject->cookie('session')) {
		
		warn "[!] we got session cookies" if ($debug);
		
		# get session from db
		tie %session, 'Apache::Session::MySQL',$cgiObject->cookie('session'),
			{ Handle => $dbObject, LockHandle => $dbObject, };
		
		warn "[!] \$session{last} is $session{last}" if ($debug);
		
		# if session is less than 10 minutes old
		if ($session{last} > (time - 600)) {
			warn "[!] session is less than 10 minutes old." if ($debug);
			
			# reset last access time to current time
			$session{last} = time;
			
			$session{access} = 1;
			
			# show main site
			ShowSite;
			
		}
		else {
			
			# session too old.
			ShowLogin;
			
		}
	}
	else {
		
		# no session found.
		ShowLogin;
		
	}
}
else {
	
	# no cookies found.
	ShowLogin;

}


# check for CGI parameters
if ($cgiObject->param()) {
	warn "[!] found cgi params!" if ($debug);
	# check for username and password parameters
	if ($cgiObject->param("loginUsername") and $cgiObject->param("loginPassword")) {
		warn "[!] entering CheckLogin" if ($debug);
		$loginUID = CheckLogin;
		if ($loginUID) {
			# c'mon in
			$session{access} = 1;
			$jsonData = qq{{"success" : "login is successful", "userid" : "$loginUID"}};
		}
		else {
			# access denied
			#$session{access} = 0;
			$jsonData = qq{{"error" : "username or password is incorrect"}};
		}
	}
	# check for username, password1 and password2
	if ($cgiObject->param("signupUsername") and $cgiObject->param("signupPassword") and $cgiObject->param("signupConfirm")) {
		
		warn "[!] entering CheckSignup" if ($debug);
				
		if (CheckSignup) {
			# signup successful
			warn "[+] CheckSignup was successful" if ($debug);
			$jsonData = qq{{"success" : "signup was successful"}};
		}
		else {
			# signup unsuccessful
			warn "[-] CheckSignup was unsuccessful" if ($debug);
			$jsonData = qq{{"error" : "username is not available"}};
		}
	}
	if ($cgiObject->param("logout")) {
		warn "[!] found cgi param logout" if ($debug);
		if ($cgiObject->param("logout") == 1) {
			warn "[!] user clicked logout button!" if ($debug);
			$jsonData = qq{{"success" : "user logged out!"}};
			$session{access} = 0;
			warn Dumper %session if ($debug);
		}
		else {
			warn "[!] user didn't click logout button!" if ($debug);
			$jsonData = qq{{"error" : "something's fucky"}};
		}
	}
	
}




# is there json data to return to ajax?
if ($jsonData) {
	# return the json string
	print $cgiObject->header(-type	=> 'application/json',
							-charset=> 'utf-8',
							-cookie	=> $cgiObject->cookie(-name => 'session',
														  -value => $session{_session_id},
														  -expires => '+1d'),
							#-cookie => $cgiObject->cookie(-name => 'access',
							#							  -value => $session{access},
							#							  -expires => ''),
					);
	print $jsonData;
}
# is this your first time here?
else {
	
	
}
	
if ($debug) {
	warn "\n[+] ",Dumper( %session );
}

__END__
